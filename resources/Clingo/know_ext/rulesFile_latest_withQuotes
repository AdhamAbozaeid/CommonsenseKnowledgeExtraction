%27 forward causal relations (from CausalNet paper) + 6 new (at the end)
causal_fwd("lead to";"leads to";"led to";"leading to";"give rise to";"gave rise to";"given rise to";"giving rise to";"induce";"inducing";"induced";"induces";"cause";"causes";"causing";"caused";"bring on";"brings on";"brought on";"bringing on";", thus";", therefore";"and hence";", hence";", consequently";"and consequently";", for this reason alone";"so";"in order to";"that";"when").%;"to";"until").

%14 backward causal (from CausalNet paper) relations
causal_bwd("caused by";"result from";"resulting from";"results from";"resulted from";", because";"because";"because of";", inasmuch as";"due to";"in consequence of";"owing to";"as a result of";"as a consequence of").

% followed by relations
followed_fwd("and";"before").
followed_bwd("after").

type2_conn(X) :- causal_fwd(X).
type2_conn(X) :- causal_bwd(X).

copular_verb("be";"have").

copularVerb(V) :- has_part1(V,"instance_of",COP), has_part1(V,"pos","v"), copular_verb(COP).
copularVerb(V) :- has_part2(V,"instance_of",COP), has_part2(V,"pos","v"), copular_verb(COP).
nCopVerb(V) :- not copularVerb(V), has_part1(V,"instance_of",C), has_part1(V,"pos","v").%, C!=COP, copular_verb(COP).
nCopVerb(V) :- not copularVerb(V), has_part2(V,"instance_of",C), has_part2(V,"pos","v").%, C!=COP, copular_verb(COP).

negative_part1(A) :- has_part1(A,"negative",N).
negative_part2(B) :- has_part2(B,"negative",N).
positive_part1(A) :- not negative_part1(A),has_part1(A,"instance_of",AA).
positive_part2(B) :- not negative_part2(B),has_part2(B,"instance_of",BB).

% Rules for type 1 Knowledge extraction
% X.PROP = true/false may prevent execution of A1 [ARG*: X; ARG*:Y]
% Property prevents Action
type1("positive",T,V1,VV1,R1) :- has_part1(V1,R1,X1), has_part1(V1,"instance_of",VV1), negative_part1(V1), R1!="pos", nCopVerb(V1), has_part1(X1,"trait",T).
type1("positive",T,V1,VV1,R1) :- has_part2(V1,R1,X1), has_part2(V1,"instance_of",VV1), negative_part2(V1), R1!="pos", nCopVerb(V1), has_part2(X1,"trait",T).

type1("positive",T,V2,VV2,R2) :- has_part1(V1,R1,X1), copularVerb(V1), R1!="pos", has_part1(X1,"trait",T), positive_part1(T), has_part2(V2,R2,X2), has_part2(V2,"instance_of",VV2), negative_part2(V2), R2!="pos", nCopVerb(V2), has_part2(X2,"instance_of",XX), has_part1(X1,"instance_of",XX), conn(C), causal_fwd(C).
type1("positive",T,V1,VV1,R1) :- has_part1(V1,R1,X1), has_part1(V1,"instance_of",VV1), negative_part1(V1), R1!="pos", nCopVerb(V1), has_part2(V2,R2,X2), copularVerb(V2), R2!="pos", has_part2(X2,"trait",T), positive_part2(T), has_part1(X1,"instance_of",XX), has_part2(X2,"instance_of",XX), conn(C), causal_bwd(C).

type1("negative",T,V2,VV2,R2) :- has_part1(V1,R1,X1), copularVerb(V1), R1!="pos", has_part1(X1,"trait",T), negative_part1(T), has_part2(V2,R2,X2), has_part2(V2,"instance_of",VV2), negative_part2(V2), R2!="pos", nCopVerb(V2), has_part2(X2,"instance_of",XX), has_part1(X1,"instance_of",XX), conn(C), causal_fwd(C).
type1("negative",T,V1,VV1,R1) :- has_part1(V1,R1,X1), has_part1(V1,"instance_of",VV1), negative_part1(V1), R1!="pos", nCopVerb(V1), has_part2(V2,R2,X2), copularVerb(V2), R2!="pos", has_part2(X2,"trait",T), negative_part2(T), has_part1(X1,"instance_of",XX), has_part2(X2,"instance_of",XX), conn(C), causal_bwd(C).

% Rules for type 2 Knowledge extraction
% execution of A1 [ARG*: X; ARG*:Y] may cause execution of A2  [ARG*: W; ARG*:Z] (W=X or W=Y or Z=X or Z=Y)
% Action1 causes Action2
type2("positive",V1,VV1,R1,X1,C,"positive",V2,VV2,R2,X2) :- has_part1(V1,R1,X1), has_part2(V2,R2,X2), has_part1(X1,"instance_of",X), has_part2(X2,"instance_of",X), has_part1(V1,"instance_of",VV1), has_part2(V2,"instance_of",VV2), R1!="pos", R2!="pos", positive_part1(V1), positive_part2(V2), nCopVerb(V1), nCopVerb(V2), conn(C), type2_conn(C).
type2("positive",V1,VV1,R1,X1,C,"positive",V2,VV2,R2,X2) :- has_part1(V1,R1,X1), has_part2(V2,R2,X2), X1=X2, has_part1(V1,"instance_of",VV1), has_part2(V2,"instance_of",VV2), R1!="pos", R2!="pos", positive_part1(V1), positive_part2(V2), nCopVerb(V1), nCopVerb(V2), conn(C), type2_conn(C).

type2("positive",V1,VV1,R1,X1,C,"nagative",V2,VV2,R2,X2) :- has_part1(V1,R1,X1), has_part2(V2,R2,X2), has_part1(X1,"instance_of",X), has_part2(X2,"instance_of",X), has_part1(V1,"instance_of",VV1), has_part2(V2,"instance_of",VV2), R1!="pos", R2!="pos", positive_part1(V1), negative_part2(V2), nCopVerb(V1), nCopVerb(V2), conn(C), type2_conn(C).
type2("positive",V1,VV1,R1,X1,C,"nagative",V2,VV2,R2,X2) :- has_part1(V1,R1,X1), has_part2(V2,R2,X2), X1=X2, has_part1(V1,"instance_of",VV1), has_part2(V2,"instance_of",VV2), R1!="pos", R2!="pos", positive_part1(V1), negative_part2(V2), nCopVerb(V1), nCopVerb(V2), conn(C), type2_conn(C).

type2("negative",V1,VV1,R1,X1,C,"positive",V2,VV2,R2,X2) :- has_part1(V1,R1,X1), has_part2(V2,R2,X2), has_part1(X1,"instance_of",X), has_part2(X2,"instance_of",X), has_part1(V1,"instance_of",VV1), has_part2(V2,"instance_of",VV2), R1!="pos", R2!="pos", negative_part1(V1), positive_part2(V2), nCopVerb(V1), nCopVerb(V2), conn(C), type2_conn(C).
type2("negative",V1,VV1,R1,X1,C,"positive",V2,VV2,R2,X2) :- has_part1(V1,R1,X1), has_part2(V2,R2,X2), X1=X2, has_part1(V1,"instance_of",VV1), has_part2(V2,"instance_of",VV2), R1!="pos", R2!="pos", negative_part1(V1), positive_part2(V2), nCopVerb(V1), nCopVerb(V2), conn(C), type2_conn(C).

type2("negative",V1,VV1,R1,X1,C,"nagative",V2,VV2,R2,X2) :- has_part1(V1,R1,X1), has_part2(V2,R2,X2), has_part1(X1,"instance_of",X), has_part2(X2,"instance_of",X), has_part1(V1,"instance_of",VV1), has_part2(V2,"instance_of",VV2), R1!="pos", R2!="pos", negative_part1(V1), negative_part2(V2), nCopVerb(V1), nCopVerb(V2), conn(C), type2_conn(C).
type2("negative",V1,VV1,R1,X1,C,"nagative",V2,VV2,R2,X2) :- has_part1(V1,R1,X1), has_part2(V2,R2,X2), X1=X2, has_part1(V1,"instance_of",VV1), has_part2(V2,"instance_of",VV2), R1!="pos", R2!="pos", negative_part1(V1), negative_part2(V2), nCopVerb(V1), nCopVerb(V2), conn(C), type2_conn(C).

% Rules for type 3 Knowledge extraction
% X.property = true/false may cause execution of A [ARG*: X; ARG*:Y] 
% Property causes Action
type3("positive",T,V2,VV2,R2) :- has_part1(V1,R1,X1), copularVerb(V1), R1!="pos", has_part1(X1,"trait",T), positive_part1(T), has_part2(V2,R2,X2), has_part2(V2,"instance_of",VV2), positive_part2(V2), R2!="pos", nCopVerb(V2), has_part2(X2,"instance_of",XX), has_part1(X1,"instance_of",XX), conn(C), causal_fwd(C).
type3("positive",T,V2,VV2,R2) :- has_part1(V1,R1,X1), copularVerb(V1), R1!="pos", has_part1(X1,"trait",T), positive_part1(T), has_part2(V2,R2,X2), has_part2(V2,"instance_of",VV2), positive_part2(V2), R2!="pos", nCopVerb(V2), X2=X1, conn(C), causal_fwd(C).

type3("positive",T,V1,VV1,R1) :- has_part1(V1,R1,X1), has_part1(V1,"instance_of",VV1), positive_part1(V1), R1!="pos", nCopVerb(V1), has_part2(V2,R2,X2), copularVerb(V2), R2!="pos", has_part2(X2,"trait",T), positive_part2(T), has_part1(X1,"instance_of",XX), conn(C), causal_bwd(C), has_part2(X2,"instance_of",XX).
type3("positive",T,V1,VV1,R1) :- has_part1(V1,R1,X1), has_part1(V1,"instance_of",VV1), positive_part1(V1), R1!="pos", nCopVerb(V1), has_part2(V2,R2,X2), copularVerb(V2), R2!="pos", has_part2(X2,"trait",T), positive_part2(T), X1=X2, conn(C), causal_bwd(C).

type3("negative",T,V2,VV2,R2) :- has_part1(V1,R1,X1), copularVerb(V1), R1!="pos", has_part1(X1,"trait",T), negative_part1(T), has_part2(V2,R2,X2), has_part2(V2,"instance_of",VV2), positive_part2(V2), R2!="pos", nCopVerb(V2), has_part2(X2,"instance_of",XX), has_part1(X1,"instance_of",XX), conn(C), causal_fwd(C).
type3("negative",T,V2,VV2,R2) :- has_part1(V1,R1,X1), copularVerb(V1), R1!="pos", has_part1(X1,"trait",T), negative_part1(T), has_part2(V2,R2,X2), has_part2(V2,"instance_of",VV2), positive_part2(V2), R2!="pos", nCopVerb(V2), X2=X1, conn(C), causal_fwd(C).

type3("negative",T,V1,VV1,R1) :- has_part1(V1,R1,X1), has_part1(V1,"instance_of",VV1), positive_part1(V1), R1!="pos", nCopVerb(V1), has_part2(V2,R2,X2), copularVerb(V2), R2!="pos", has_part2(X2,"trait",T), negative_part2(T), has_part1(X1,"instance_of",XX), has_part2(X2,"instance_of",XX), conn(C), causal_bwd(C).
type3("negative",T,V1,VV1,R1) :- has_part1(V1,R1,X1), has_part1(V1,"instance_of",VV1), positive_part1(V1), R1!="pos", nCopVerb(V1), has_part2(V2,R2,X2), copularVerb(V2), R2!="pos", has_part2(X2,"trait",T), negative_part2(T), X1=X2, conn(C), causal_bwd(C).

type3("positive",T,V1,VV1,R1) :- has_part1(V1,R1,X1), has_part1(V1,"instance_of",VV1), nCopVerb(V1), R1!="pos", has_part1(X1,"trait",T), positive_part1(T).

% No idea Which situation this could be
%has_part1(X1,"trait",T) :- has_part1(V1,agent,X1), has_part1(V1,"instance_of",be), has_part1(V1,recipient,X2), has_part1(X2,"trait",T).
%has_part2(X1,"trait",T) :- has_part2(V1,agent,X1), has_part2(V1,"instance_of",be), has_part2(V1,recipient,X2), has_part2(X2,"trait",T).

%%%

% Rules for type 4 Knowledge extraction
% execution of A1 [ARG*: X; ARG*:Y] may cause X.property = true/false
% Action causes Property
type4("positive",T,"positive",V1,VV1,R1) :- has_part1(V1,R1,X1), nCopVerb(V1), R1!="pos", has_part2(X2,"trait",T), positive_part2(T), has_part1(V1,"instance_of",VV1), positive_part1(V1), has_part2(X2,"instance_of",XX), has_part1(X1,"instance_of",XX), conn(C), causal_fwd(C).
type4("positive",T,"nagative",V1,VV1,R1) :- has_part1(V1,R1,X1), nCopVerb(V1), R1!="pos", has_part2(X2,"trait",T), positive_part2(T), has_part1(V1,"instance_of",VV1), negative_part1(V1), has_part2(X2,"instance_of",XX), has_part1(X1,"instance_of",XX), conn(C), causal_fwd(C).
type4("negative",T,"positive",V1,VV1,R1) :- has_part1(V1,R1,X1), nCopVerb(V1), R1!="pos", has_part2(X2,"trait",T), negative_part2(T), has_part1(V1,"instance_of",VV1), positive_part1(V1), has_part2(X2,"instance_of",XX), has_part1(X1,"instance_of",XX), conn(C), causal_fwd(C).
type4("negative",T,"nagative",V1,VV1,R1) :- has_part1(V1,R1,X1), nCopVerb(V1), R1!="pos", has_part2(X2,"trait",T), negative_part2(T), has_part1(V1,"instance_of",VV1), negative_part1(V1), has_part2(X2,"instance_of",XX), has_part1(X1,"instance_of",XX), conn(C), causal_fwd(C).

type4("positive",T,"positive",V1,VV1,R1) :- has_part1(X2,"trait",T), positive_part1(T), has_part1(X2,"instance_of",XX), has_part2(V1,R1,X1), nCopVerb(V1), R1!="pos", has_part2(V1,"instance_of",VV1), positive_part2(V1), has_part2(X1,"instance_of",XX), conn(C), causal_bwd(C).
type4("positive",T,"nagative",V1,VV1,R1) :- has_part1(X2,"trait",T), positive_part1(T), has_part1(X2,"instance_of",XX), has_part2(V1,R1,X1), nCopVerb(V1), R1!="pos", has_part2(V1,"instance_of",VV1), negative_part2(V1), has_part2(X1,"instance_of",XX), conn(C), causal_bwd(C).
type4("negative",T,"positive",V1,VV1,R1) :- has_part1(X2,"trait",T), negative_part1(T), has_part1(X2,"instance_of",XX), has_part2(V1,R1,X1), nCopVerb(V1), R1!="pos", has_part2(V1,"instance_of",VV1), positive_part2(V1), has_part2(X1,"instance_of",XX), conn(C), causal_bwd(C).
type4("negative",T,"nagative",V1,VV1,R1) :- has_part1(X2,"trait",T), negative_part1(T), has_part1(X2,"instance_of",XX), has_part2(V1,R1,X1), nCopVerb(V1), R1!="pos", has_part2(V1,"instance_of",VV1), negative_part2(V1), has_part2(X1,"instance_of",XX), conn(C), causal_bwd(C).

% Rules for type 5 Knowledge extraction
% execution of A1 [ARG*: X; ARG*:Y] may prevent execution of A2 [ARG*: X; ARG*:Z]
% Action1 prevents Action2
% This type is taken care of with type 1
%type5("negative",V1,VV1,R1,X1,"positive",V2,VV2,R2,X2) :- has_part1(V1,R1,X1), has_part2(V2,R2,X2), has_part1(X1,"instance_of",X), has_part2(X2,"instance_of",X), has_part1(V1,"instance_of",VV1), has_part2(V2,"instance_of",VV2), R1!="pos", R2!="pos", negative_part1(V1), positive_part2(V2), nCopVerb(V1), nCopVerb(V2), conn(then), initconn(if).

%type5("negative",V1,VV1,R1,X1,"positive",V2,VV2,R2,X2) :- has_part1(V1,R1,X1), has_part2(V2,R2,X2), has_part1(X1,"instance_of",X), has_part2(X2,"instance_of",X), has_part1(V1,"instance_of",VV1), has_part2(V2,"instance_of",VV2), R1!="pos", R2!="pos", negative_part1(V1), positive_part2(V2), nCopVerb(V1), nCopVerb(V2), conn(comma), initconn(if).

% Rules for type 6 Knowledge extraction
% execution of A1 [ARG*: X; ARG*:Y] may be followed by execution of A2  [ARG*: W; ARG*:Z] (W=X or W=Y or Z=X or Z=Y)
% Action1 followed by Action2
type6("positive",V1,VV1,R1,X1,C,"positive",V2,VV2,R2,X2) :- has_part1(V1,R1,X1), has_part2(V2,R2,X2), has_part1(X1,"instance_of",X), has_part2(X2,"instance_of",X), has_part1(V1,"instance_of",VV1), has_part2(V2,"instance_of",VV2), R1!="pos", R2!="pos", positive_part1(V1), positive_part2(V2), nCopVerb(V1), nCopVerb(V2), conn(C), followed_fwd(C).
type6("positive",V1,VV1,R1,X1,C,"nagative",V2,VV2,R2,X2) :- has_part1(V1,R1,X1), has_part2(V2,R2,X2), has_part1(X1,"instance_of",X), has_part2(X2,"instance_of",X), has_part1(V1,"instance_of",VV1), has_part2(V2,"instance_of",VV2), R1!="pos", R2!="pos", positive_part1(V1), negative_part2(V2), nCopVerb(V1), nCopVerb(V2), conn(C), followed_fwd(C).
type6("negative",V1,VV1,R1,X1,C,"positive",V2,VV2,R2,X2) :- has_part1(V1,R1,X1), has_part2(V2,R2,X2), has_part1(X1,"instance_of",X), has_part2(X2,"instance_of",X), has_part1(V1,"instance_of",VV1), has_part2(V2,"instance_of",VV2), R1!="pos", R2!="pos", negative_part1(V1), positive_part2(V2), nCopVerb(V1), nCopVerb(V2), conn(C), followed_fwd(C).
type6("negative",V1,VV1,R1,X1,C,"nagative",V2,VV2,R2,X2) :- has_part1(V1,R1,X1), has_part2(V2,R2,X2), has_part1(X1,"instance_of",X), has_part2(X2,"instance_of",X), has_part1(V1,"instance_of",VV1), has_part2(V2,"instance_of",VV2), R1!="pos", R2!="pos", negative_part1(V1), negative_part2(V2), nCopVerb(V1), nCopVerb(V2), conn(C), followed_fwd(C).

type6("positive",V1,VV1,R1,X1,C,"positive",V2,VV2,R2,X2) :- has_part2(V1,R1,X1), has_part1(V2,R2,X2), has_part2(X1,"instance_of",X), has_part1(X2,"instance_of",X), has_part2(V1,"instance_of",VV1), has_part1(V2,"instance_of",VV2), R1!="pos", R2!="pos", positive_part2(V1), positive_part1(V2), nCopVerb(V1), nCopVerb(V2), conn(C), followed_bwd(C).
type6("positive",V1,VV1,R1,X1,C,"nagative",V2,VV2,R2,X2) :- has_part2(V1,R1,X1), has_part1(V2,R2,X2), has_part2(X1,"instance_of",X), has_part1(X2,"instance_of",X), has_part2(V1,"instance_of",VV1), has_part1(V2,"instance_of",VV2), R1!="pos", R2!="pos", positive_part2(V1), negative_part1(V2), nCopVerb(V1), nCopVerb(V2), conn(C), followed_bwd(C).
type6("negative",V1,VV1,R1,X1,C,"positive",V2,VV2,R2,X2) :- has_part2(V1,R1,X1), has_part1(V2,R2,X2), has_part2(X1,"instance_of",X), has_part1(X2,"instance_of",X), has_part2(V1,"instance_of",VV1), has_part1(V2,"instance_of",VV2), R1!="pos", R2!="pos", negative_part2(V1), positive_part1(V2), nCopVerb(V1), nCopVerb(V2), conn(C), followed_bwd(C).
type6("negative",V1,VV1,R1,X1,C,"nagative",V2,VV2,R2,X2) :- has_part2(V1,R1,X1), has_part1(V2,R2,X2), has_part2(X1,"instance_of",X), has_part1(X2,"instance_of",X), has_part2(V1,"instance_of",VV1), has_part1(V2,"instance_of",VV2), R1!="pos", R2!="pos", negative_part2(V1), negative_part1(V2), nCopVerb(V1), nCopVerb(V2), conn(C), followed_bwd(C).

% 11/29/2017
type6("positive",V1,VV1,R1,X,C,"positive",V2,VV2,R2,X) :- has_part1(V1,R1,X), has_part2(V2,R2,X), has_part1(V1,"instance_of",VV1), has_part2(V2,"instance_of",VV2), R1!="pos", R2!="pos", positive_part1(V1), positive_part2(V2), nCopVerb(V1), nCopVerb(V2), conn(C), followed_fwd(C).
type6("positive",V1,VV1,R1,X,C,"nagative",V2,VV2,R2,X) :- has_part1(V1,R1,X), has_part2(V2,R2,X), has_part1(V1,"instance_of",VV1), has_part2(V2,"instance_of",VV2), R1!="pos", R2!="pos", positive_part1(V1), negative_part2(V2), nCopVerb(V1), nCopVerb(V2), conn(C), followed_fwd(C).
type6("negative",V1,VV1,R1,X,C,"nagative",V2,VV2,R2,X) :- has_part1(V1,R1,X), has_part2(V2,R2,X), has_part1(V1,"instance_of",VV1), has_part2(V2,"instance_of",VV2), R1!="pos", R2!="pos", negative_part1(V1), negative_part2(V2), nCopVerb(V1), nCopVerb(V2), conn(C), followed_fwd(C).
type6("negative",V1,VV1,R1,X,C,"positive",V2,VV2,R2,X) :- has_part1(V1,R1,X), has_part2(V2,R2,X), has_part1(V1,"instance_of",VV1), has_part2(V2,"instance_of",VV2), R1!="pos", R2!="pos", negative_part1(V1), positive_part2(V2), nCopVerb(V1), nCopVerb(V2), conn(C), followed_fwd(C).

type6("positive",V1,VV1,R1,X,C,"positive",V2,VV2,R2,X) :- has_part2(V1,R1,X), has_part1(V2,R2,X), has_part2(V1,"instance_of",VV1), has_part1(V2,"instance_of",VV2), R1!="pos", R2!="pos", positive_part2(V1), positive_part1(V2), nCopVerb(V1), nCopVerb(V2), conn(C), followed_bwd(C).
type6("positive",V1,VV1,R1,X,C,"nagative",V2,VV2,R2,X) :- has_part2(V1,R1,X), has_part1(V2,R2,X), has_part2(V1,"instance_of",VV1), has_part1(V2,"instance_of",VV2), R1!="pos", R2!="pos", positive_part2(V1), negative_part1(V2), nCopVerb(V1), nCopVerb(V2), conn(C), followed_bwd(C).
type6("negative",V1,VV1,R1,X,C,"nagative",V2,VV2,R2,X) :- has_part2(V1,R1,X), has_part1(V2,R2,X), has_part2(V1,"instance_of",VV1), has_part1(V2,"instance_of",VV2), R1!="pos", R2!="pos", negative_part2(V1), negative_part1(V2), nCopVerb(V1), nCopVerb(V2), conn(C), followed_bwd(C).
type6("negative",V1,VV1,R1,X,C,"positive",V2,VV2,R2,X) :- has_part2(V1,R1,X), has_part1(V2,R2,X), has_part2(V1,"instance_of",VV1), has_part1(V2,"instance_of",VV2), R1!="pos", R2!="pos", negative_part2(V1), positive_part1(V2), nCopVerb(V1), nCopVerb(V2), conn(C), followed_bwd(C).

% Rules for type 7 Knowledge extraction
% Action followed by Property
type7("positive",V1,VV1,R1,"positive",T) :- has_part1(V1,R1,X1), has_part2(X2,"trait",T), has_part1(X1,"instance_of",X), has_part2(X2,"instance_of",X), has_part1(V1,"instance_of",VV1), R1!="pos", positive_part1(V1), positive_part2(T), nCopVerb(V1), conn(C), followed_fwd(C).
type7("negative",V1,VV1,R1,"positive",T) :- has_part1(V1,R1,X1), has_part2(X2,"trait",T), has_part1(X1,"instance_of",X), has_part2(X2,"instance_of",X), has_part1(V1,"instance_of",VV1), R1!="pos", negative_part1(V1), positive_part2(T), nCopVerb(V1), conn(C), followed_fwd(C).
type7("positive",V1,VV1,R1,"nagative",T) :- has_part1(V1,R1,X1), has_part2(X2,"trait",T), has_part1(X1,"instance_of",X), has_part2(X2,"instance_of",X), has_part1(V1,"instance_of",VV1), R1!="pos", positive_part1(V1), negative_part2(T), nCopVerb(V1), conn(C), followed_fwd(C).
type7("negative",V1,VV1,R1,"nagative",T) :- has_part1(V1,R1,X1), has_part2(X2,"trait",T), has_part1(X1,"instance_of",X), has_part2(X2,"instance_of",X), has_part1(V1,"instance_of",VV1), R1!="pos", negative_part1(V1), negative_part2(T), nCopVerb(V1), conn(C), followed_fwd(C).

type7("positive",V1,VV1,R1,"positive",T) :- has_part2(V1,R1,X1), has_part1(X2,"trait",T), has_part2(X1,"instance_of",X), has_part1(X2,"instance_of",X), has_part2(V1,"instance_of",VV1), R1!="pos", positive_part2(V1), positive_part1(T), nCopVerb(V1), conn(C), followed_bwd(C).
type7("negative",V1,VV1,R1,"positive",T) :- has_part2(V1,R1,X1), has_part1(X2,"trait",T), has_part2(X1,"instance_of",X), has_part1(X2,"instance_of",X), has_part2(V1,"instance_of",VV1), R1!="pos", negative_part2(V1), positive_part1(T), nCopVerb(V1), conn(C), followed_bwd(C).
type7("positive",V1,VV1,R1,"nagative",T) :- has_part2(V1,R1,X1), has_part1(X2,"trait",T), has_part2(X1,"instance_of",X), has_part1(X2,"instance_of",X), has_part2(V1,"instance_of",VV1), R1!="pos", positive_part2(V1), negative_part1(T), nCopVerb(V1), conn(C), followed_bwd(C).
type7("negative",V1,VV1,R1,"nagative",T) :- has_part2(V1,R1,X1), has_part1(X2,"trait",T), has_part2(X1,"instance_of",X), has_part1(X2,"instance_of",X), has_part2(V1,"instance_of",VV1), R1!="pos", negative_part2(V1), negative_part1(T), nCopVerb(V1), conn(C), followed_bwd(C).

% Rules for type 8 Knowledge extraction
% Property followed by Action
type8("positive",T,"positive",V1,VV1,R1) :- has_part2(V1,R1,X1), has_part1(X2,"trait",T), has_part2(X1,"instance_of",X), has_part1(X2,"instance_of",X), has_part2(V1,"instance_of",VV1), R1!="pos", positive_part2(V1), positive_part1(T), nCopVerb(V1), conn(C), followed_fwd(C).
type8("positive",T,"nagative",V1,VV1,R1) :- has_part2(V1,R1,X1), has_part1(X2,"trait",T), has_part2(X1,"instance_of",X), has_part1(X2,"instance_of",X), has_part2(V1,"instance_of",VV1), R1!="pos", negative_part2(V1), positive_part1(T), nCopVerb(V1), conn(C), followed_fwd(C).
type8("negative",T,"positive",V1,VV1,R1) :- has_part2(V1,R1,X1), has_part1(X2,"trait",T), has_part2(X1,"instance_of",X), has_part1(X2,"instance_of",X), has_part2(V1,"instance_of",VV1), R1!="pos", positive_part2(V1), negative_part1(T), nCopVerb(V1), conn(C), followed_fwd(C).
type8("negative",T,"nagative",V1,VV1,R1) :- has_part2(V1,R1,X1), has_part1(X2,"trait",T), has_part2(X1,"instance_of",X), has_part1(X2,"instance_of",X), has_part2(V1,"instance_of",VV1), R1!="pos", negative_part2(V1), negative_part1(T), nCopVerb(V1), conn(C), followed_fwd(C).

type8("positive",T,"positive",V1,VV1,R1) :- has_part1(V1,R1,X1), has_part2(X2,"trait",T), has_part1(X1,"instance_of",X), has_part2(X2,"instance_of",X), has_part1(V1,"instance_of",VV1), R1!="pos", positive_part1(V1), positive_part2(T), nCopVerb(V1), conn(C), followed_bwd(C).
type8("positive",T,"nagative",V1,VV1,R1) :- has_part1(V1,R1,X1), has_part2(X2,"trait",T), has_part1(X1,"instance_of",X), has_part2(X2,"instance_of",X), has_part1(V1,"instance_of",VV1), R1!="pos", negative_part1(V1), positive_part2(T), nCopVerb(V1), conn(C), followed_bwd(C).
type8("negative",T,"positive",V1,VV1,R1) :- has_part1(V1,R1,X1), has_part2(X2,"trait",T), has_part1(X1,"instance_of",X), has_part2(X2,"instance_of",X), has_part1(V1,"instance_of",VV1), R1!="pos", positive_part1(V1), negative_part2(T), nCopVerb(V1), conn(C), followed_bwd(C).
type8("negative",T,"nagative",V1,VV1,R1) :- has_part1(V1,R1,X1), has_part2(X2,"trait",T), has_part1(X1,"instance_of",X), has_part2(X2,"instance_of",X), has_part1(V1,"instance_of",VV1), R1!="pos", negative_part1(V1), negative_part2(T), nCopVerb(V1), conn(C), followed_bwd(C).

% Rules for type 9 Knowledge extraction
% Co-existing properties and actions.
% Type 9_1: An Action and a Property
type9_1("positive",V1,VV1,R1,"positive",T) :- has_part1(V1,R1,X1), has_part1(V1,"instance_of",VV1), positive_part1(V1), R1!="pos", nCopVerb(V1), has_part2(X2,"trait",T), positive_part2(T), has_part1(X1,"instance_of",XX), has_part2(X2,"instance_of",XX).
type9_1("positive",V1,VV1,R1,"nagative",T) :- has_part1(V1,R1,X1), has_part1(V1,"instance_of",VV1), positive_part1(V1), R1!="pos", nCopVerb(V1), has_part2(X2,"trait",T), negative_part2(T), has_part1(X1,"instance_of",XX), has_part2(X2,"instance_of",XX).
type9_1("negative",V1,VV1,R1,"positive",T) :- has_part1(V1,R1,X1), has_part1(V1,"instance_of",VV1), negative_part1(V1), R1!="pos", nCopVerb(V1), has_part2(X2,"trait",T), positive_part2(T), has_part1(X1,"instance_of",XX), has_part2(X2,"instance_of",XX).
type9_1("negative",V1,VV1,R1,"nagative",T) :- has_part1(V1,R1,X1), has_part1(V1,"instance_of",VV1), negative_part1(V1), R1!="pos", nCopVerb(V1), has_part2(X2,"trait",T), negative_part2(T), has_part1(X1,"instance_of",XX), has_part2(X2,"instance_of",XX).

type9_1("positive",V1,VV1,R1,"positive",T) :- has_part2(V1,R1,X1), has_part2(V1,"instance_of",VV1), positive_part2(V1), R1!="pos", nCopVerb(V1), has_part1(X2,"trait",T), positive_part1(T), has_part2(X1,"instance_of",XX), has_part1(X2,"instance_of",XX).
type9_1("positive",V1,VV1,R1,"nagative",T) :- has_part2(V1,R1,X1), has_part2(V1,"instance_of",VV1), positive_part2(V1), R1!="pos", nCopVerb(V1), has_part1(X2,"trait",T), negative_part1(T), has_part2(X1,"instance_of",XX), has_part1(X2,"instance_of",XX).
type9_1("negative",V1,VV1,R1,"positive",T) :- has_part2(V1,R1,X1), has_part2(V1,"instance_of",VV1), negative_part2(V1), R1!="pos", nCopVerb(V1), has_part1(X2,"trait",T), positive_part1(T), has_part2(X1,"instance_of",XX), has_part1(X2,"instance_of",XX).
type9_1("negative",V1,VV1,R1,"nagative",T) :- has_part2(V1,R1,X1), has_part2(V1,"instance_of",VV1), negative_part2(V1), R1!="pos", nCopVerb(V1), has_part1(X2,"trait",T), negative_part1(T), has_part2(X1,"instance_of",XX), has_part1(X2,"instance_of",XX).

% 12/27/2017
%type9_1("positive",V1,VV1,R1,"positive",T) :- has_part1(V1,R1,X1), has_part1(V1,"instance_of",VV1), positive_part1(V1), R1!="pos", nCopVerb(V1), has_part1(T,"is_trait_of",X2), positive_part1(T), has_part1(X1,"instance_of",XX), has_part1(X2,"instance_of",XX).

% 12/21/2017
type9_1("positive",V1,VV1,R1,"positive",T) :- has_part1(V1,R1,X1), has_part1(V1,"instance_of",VV1), positive_part1(V1), R1!="pos", nCopVerb(V1), has_part1(X2,"trait",T), positive_part1(T), has_part1(X1,"instance_of",XX), has_part1(X2,"instance_of",XX).
type9_1("positive",V1,VV1,R1,"nagative",T) :- has_part1(V1,R1,X1), has_part1(V1,"instance_of",VV1), positive_part1(V1), R1!="pos", nCopVerb(V1), has_part1(X2,"trait",T), negative_part1(T), has_part1(X1,"instance_of",XX), has_part1(X2,"instance_of",XX).
type9_1("negative",V1,VV1,R1,"positive",T) :- has_part1(V1,R1,X1), has_part1(V1,"instance_of",VV1), negative_part1(V1), R1!="pos", nCopVerb(V1), has_part1(X2,"trait",T), positive_part1(T), has_part1(X1,"instance_of",XX), has_part1(X2,"instance_of",XX).
type9_1("negative",V1,VV1,R1,"nagative",T) :- has_part1(V1,R1,X1), has_part1(V1,"instance_of",VV1), negative_part1(V1), R1!="pos", nCopVerb(V1), has_part1(X2,"trait",T), negative_part1(T), has_part1(X1,"instance_of",XX), has_part1(X2,"instance_of",XX).

type9_1("positive",V1,VV1,R1,"positive",T) :- has_part2(V1,R1,X1), has_part2(V1,"instance_of",VV1), positive_part2(V1), R1!="pos", nCopVerb(V1), has_part2(X2,"trait",T), positive_part2(T), has_part2(X1,"instance_of",XX), has_part2(X2,"instance_of",XX).
type9_1("positive",V1,VV1,R1,"nagative",T) :- has_part2(V1,R1,X1), has_part2(V1,"instance_of",VV1), positive_part2(V1), R1!="pos", nCopVerb(V1), has_part2(X2,"trait",T), negative_part2(T), has_part2(X1,"instance_of",XX), has_part2(X2,"instance_of",XX).
type9_1("negative",V1,VV1,R1,"positive",T) :- has_part2(V1,R1,X1), has_part2(V1,"instance_of",VV1), negative_part2(V1), R1!="pos", nCopVerb(V1), has_part2(X2,"trait",T), positive_part2(T), has_part2(X1,"instance_of",XX), has_part2(X2,"instance_of",XX).
type9_1("negative",V1,VV1,R1,"nagative",T) :- has_part2(V1,R1,X1), has_part2(V1,"instance_of",VV1), negative_part2(V1), R1!="pos", nCopVerb(V1), has_part2(X2,"trait",T), negative_part2(T), has_part2(X1,"instance_of",XX), has_part2(X2,"instance_of",XX).

% Type 9_2: Two Actions
% 12/03/2017
type9_2("positive",V1,VV1,R1,X1,"and","positive",V2,VV2,R2,X2) :- has_part1(V1,R1,X1), has_part1(V2,R2,X2), has_part1(V1,"instance_of",VV1), has_part1(V2,"instance_of",VV2), R1!="pos", R2!="pos", positive_part1(V1), positive_part1(V2), nCopVerb(V1), nCopVerb(V2), has_part1(X1,"instance_of",X), has_part1(X2,"instance_of",X), V1!=V2, not type9_2("positive",V2,VV2,R2,X2,"and","positive",V1,VV1,R1,X1).
type9_2("negative",V1,VV1,R1,X1,"and","positive",V2,VV2,R2,X2) :- has_part1(V1,R1,X1), has_part1(V2,R2,X2), has_part1(V1,"instance_of",VV1), has_part1(V2,"instance_of",VV2), R1!="pos", R2!="pos", negative_part1(V1), positive_part1(V2), nCopVerb(V1), nCopVerb(V2), has_part1(X1,"instance_of",X), has_part1(X2,"instance_of",X), V1!=V2, not type9_2("positive",V2,VV2,R2,X2,"and","nagative",V1,VV1,R1,X1).
type9_2("positive",V1,VV1,R1,X1,"and","nagative",V2,VV2,R2,X2) :- has_part1(V1,R1,X1), has_part1(V2,R2,X2), has_part1(V1,"instance_of",VV1), has_part1(V2,"instance_of",VV2), R1!="pos", R2!="pos", positive_part1(V1), negative_part1(V2), nCopVerb(V1), nCopVerb(V2), has_part1(X1,"instance_of",X), has_part1(X2,"instance_of",X), V1!=V2, not type9_2("negative",V2,VV2,R2,X2,"and","positive",V1,VV1,R1,X1).
type9_2("negative",V1,VV1,R1,X1,"and","nagative",V2,VV2,R2,X2) :- has_part1(V1,R1,X1), has_part1(V2,R2,X2), has_part1(V1,"instance_of",VV1), has_part1(V2,"instance_of",VV2), R1!="pos", R2!="pos", negative_part1(V1), negative_part1(V2), nCopVerb(V1), nCopVerb(V2), has_part1(X1,"instance_of",X), has_part1(X2,"instance_of",X), V1!=V2, not type9_2("negative",V2,VV2,R2,X2,"and","nagative",V1,VV1,R1,X1).

type9_2("positive",V1,VV1,R1,X1,"and","positive",V2,VV2,R2,X2) :- has_part2(V1,R1,X1), has_part2(V2,R2,X2), has_part2(V1,"instance_of",VV1), has_part2(V2,"instance_of",VV2), R1!="pos", R2!="pos", positive_part2(V1), positive_part2(V2), nCopVerb(V1), nCopVerb(V2), has_part2(X1,"instance_of",X), has_part2(X2,"instance_of",X), V1!=V2, not type9_2("positive",V2,VV2,R2,X2,"and","positive",V1,VV1,R1,X1).
type9_2("negative",V1,VV1,R1,X1,"and","positive",V2,VV2,R2,X2) :- has_part2(V1,R1,X1), has_part2(V2,R2,X2), has_part2(V1,"instance_of",VV1), has_part2(V2,"instance_of",VV2), R1!="pos", R2!="pos", negative_part2(V1), positive_part2(V2), nCopVerb(V1), nCopVerb(V2), has_part2(X1,"instance_of",X), has_part2(X2,"instance_of",X), V1!=V2, not type9_2("positive",V2,VV2,R2,X2,"and","nagative",V1,VV1,R1,X1).
type9_2("positive",V1,VV1,R1,X1,"and","nagative",V2,VV2,R2,X2) :- has_part2(V1,R1,X1), has_part2(V2,R2,X2), has_part2(V1,"instance_of",VV1), has_part2(V2,"instance_of",VV2), R1!="pos", R2!="pos", positive_part2(V1), negative_part2(V2), nCopVerb(V1), nCopVerb(V2), has_part2(X1,"instance_of",X), has_part2(X2,"instance_of",X), V1!=V2, not type9_2("negative",V2,VV2,R2,X2,"and","positive",V1,VV1,R1,X1).
type9_2("negative",V1,VV1,R1,X1,"and","nagative",V2,VV2,R2,X2) :- has_part2(V1,R1,X1), has_part2(V2,R2,X2), has_part2(V1,"instance_of",VV1), has_part2(V2,"instance_of",VV2), R1!="pos", R2!="pos", negative_part2(V1), negative_part2(V2), nCopVerb(V1), nCopVerb(V2), has_part2(X1,"instance_of",X), has_part2(X2,"instance_of",X), V1!=V2, not type9_2("negative",V2,VV2,R2,X2,"and","nagative",V1,VV1,R1,X1).

type9_2("positive",V1,VV1,R1,X1,"and","positive",V2,VV2,R2,X2) :- has_part1(V1,R1,X1), has_part2(V2,R2,X2), has_part1(V1,"instance_of",VV1), has_part2(V2,"instance_of",VV2), R1!="pos", R2!="pos", positive_part1(V1), positive_part2(V2), nCopVerb(V1), nCopVerb(V2), has_part1(X1,"instance_of",X), has_part2(X2,"instance_of",X), not type9_2("positive",V2,VV2,R2,X2,"and","positive",V1,VV1,R1,X1).
type9_2("positive",V1,VV1,R1,X1,"and","nagative",V2,VV2,R2,X2) :- has_part1(V1,R1,X1), has_part2(V2,R2,X2), has_part1(V1,"instance_of",VV1), has_part2(V2,"instance_of",VV2), R1!="pos", R2!="pos", positive_part1(V1), negative_part2(V2), nCopVerb(V1), nCopVerb(V2), has_part1(X1,"instance_of",X), has_part2(X2,"instance_of",X), not type9_2("positive",V2,VV2,R2,X2,"and","nagative",V1,VV1,R1,X1).
type9_2("negative",V1,VV1,R1,X1,"and","positive",V2,VV2,R2,X2) :- has_part1(V1,R1,X1), has_part2(V2,R2,X2), has_part1(V1,"instance_of",VV1), has_part2(V2,"instance_of",VV2), R1!="pos", R2!="pos", negative_part1(V1), positive_part2(V2), nCopVerb(V1), nCopVerb(V2), has_part1(X1,"instance_of",X), has_part2(X2,"instance_of",X), not type9_2("negative",V2,VV2,R2,X2,"and","positive",V1,VV1,R1,X1).
type9_2("negative",V1,VV1,R1,X1,"and","nagative",V2,VV2,R2,X2) :- has_part1(V1,R1,X1), has_part2(V2,R2,X2), has_part1(V1,"instance_of",VV1), has_part2(V2,"instance_of",VV2), R1!="pos", R2!="pos", negative_part1(V1), negative_part2(V2), nCopVerb(V1), nCopVerb(V2), has_part1(X1,"instance_of",X), has_part2(X2,"instance_of",X), not type9_2("negative",V2,VV2,R2,X2,"and","nagative",V1,VV1,R1,X1).

% Type 9_3: Two Properties
type9_3("positive",T1,"positive",T2) :- has_part1(X1,"trait",T1), has_part1(X1,"instance_of",XX), positive_part1(T1), has_part2(X2,"trait",T2), has_part2(X2,"instance_of",XX), positive_part2(T2).
type9_3("negative",T1,"positive",T2) :- has_part1(X1,"trait",T1), has_part1(X1,"instance_of",XX), negative_part1(T1), has_part2(X2,"trait",T2), has_part2(X2,"instance_of",XX), positive_part2(T2).
type9_3("positive",T1,"nagative",T2) :- has_part1(X1,"trait",T1), has_part1(X1,"instance_of",XX), positive_part1(T1), has_part2(X2,"trait",T2), has_part2(X2,"instance_of",XX), negative_part2(T2).
type9_3("negative",T1,"nagative",T2) :- has_part1(X1,"trait",T1), has_part1(X1,"instance_of",XX), negative_part1(T1), has_part2(X2,"trait",T2), has_part2(X2,"instance_of",XX), negative_part2(T2).

type9_3("positive",T1,"positive",T2) :- has_part1(X1,"trait",T1), has_part1(X1,"instance_of",XX), positive_part1(T1), has_part1(X2,"trait",T2), has_part1(X2,"instance_of",XX), positive_part1(T), T1!=T2.
type9_3("negative",T1,"positive",T2) :- has_part1(X1,"trait",T1), has_part1(X1,"instance_of",XX), negative_part1(T1), has_part1(X2,"trait",T2), has_part1(X2,"instance_of",XX), positive_part1(T), T1!=T2.
type9_3("positive",T1,"nagative",T2) :- has_part1(X1,"trait",T1), has_part1(X1,"instance_of",XX), positive_part1(T1), has_part1(X2,"trait",T2), has_part1(X2,"instance_of",XX), negative_part1(T), T1!=T2.
type9_3("negative",T1,"nagative",T2) :- has_part1(X1,"trait",T1), has_part1(X1,"instance_of",XX), negative_part1(T1), has_part1(X2,"trait",T2), has_part1(X2,"instance_of",XX), negative_part1(T), T1!=T2.

type9_3("positive",T1,"positive",T2) :- has_part2(X1,"trait",T1), has_part2(X1,"instance_of",XX), positive_part2(T1), has_part2(X2,"trait",T2), has_part2(X2,"instance_of",XX), positive_part2(T), T1!=T2.
type9_3("negative",T1,"positive",T2) :- has_part2(X1,"trait",T1), has_part2(X1,"instance_of",XX), negative_part2(T1), has_part2(X2,"trait",T2), has_part2(X2,"instance_of",XX), positive_part2(T), T1!=T2.
type9_3("positive",T1,"nagative",T2) :- has_part2(X1,"trait",T1), has_part2(X1,"instance_of",XX), positive_part2(T1), has_part2(X2,"trait",T2), has_part2(X2,"instance_of",XX), negative_part2(T), T1!=T2.
type9_3("negative",T1,"nagative",T2) :- has_part2(X1,"trait",T1), has_part2(X1,"instance_of",XX), negative_part2(T1), has_part2(X2,"trait",T2), has_part2(X2,"instance_of",XX), negative_part2(T), T1!=T2.

% Rules for type 10 Knowledge extraction
% Property1 causes Property2
type10("positive",T1,"positive",T2) :- has_part1(X1,"trait",T1), positive_part1(T1), has_part2(X2,"trait",T2), positive_part2(T2), has_part1(X1,"instance_of",XX), has_part2(X2,"instance_of",XX), conn(C), causal_fwd(C).
type10("positive",T1,"nagative",T2) :- has_part1(X1,"trait",T1), positive_part1(T1), has_part2(X2,"trait",T2), negative_part2(T2), has_part1(X1,"instance_of",XX), has_part2(X2,"instance_of",XX), conn(C), causal_fwd(C).
type10("negative",T1,"positive",T2) :- has_part1(X1,"trait",T1), negative_part1(T1), has_part2(X2,"trait",T2), positive_part2(T2), has_part1(X1,"instance_of",XX), has_part2(X2,"instance_of",XX), conn(C), causal_fwd(C).
type10("negative",T1,"nagative",T2) :- has_part1(X1,"trait",T1), negative_part1(T1), has_part2(X2,"trait",T2), negative_part2(T2), has_part1(X1,"instance_of",XX), has_part2(X2,"instance_of",XX), conn(C), causal_fwd(C).

type10("positive",T1,"positive",T2) :- has_part2(X1,"trait",T1), positive_part2(T1), has_part1(X2,"trait",T2), positive_part1(T2), has_part2(X1,"instance_of",XX), has_part1(X2,"instance_of",XX), conn(C), causal_bwd(C).
type10("positive",T1,"nagative",T2) :- has_part2(X1,"trait",T1), positive_part2(T1), has_part1(X2,"trait",T2), negative_part1(T2), has_part2(X1,"instance_of",XX), has_part1(X2,"instance_of",XX), conn(C), causal_bwd(C).
type10("negative",T1,"positive",T2) :- has_part2(X1,"trait",T1), negative_part2(T1), has_part1(X2,"trait",T2), positive_part1(T2), has_part2(X1,"instance_of",XX), has_part1(X2,"instance_of",XX), conn(C), causal_bwd(C).
type10("negative",T1,"nagative",T2) :- has_part2(X1,"trait",T1), negative_part2(T1), has_part1(X2,"trait",T2), negative_part1(T2), has_part2(X1,"instance_of",XX), has_part1(X2,"instance_of",XX), conn(C), causal_bwd(C).

%#hide.
#show type1/5.
#show type2/11.
#show type3/5.
#show type4/6.
%#show type5/10.
#show type6/11.
#show type7/6.
#show type9_1/6.
#show type9_2/11.
#show type9_3/4.
#show type10/4.
%#show nCopVerb/1.
%#show positive_part1/1.
%#show positive_part2/1.
%#show conn/1.
%#show type2_conn/1.
%#show type4_1/10.
%#show type4Other1/10.
%#show nCopVerb/1.
%#show positive_part1/1.
